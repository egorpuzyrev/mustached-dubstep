#! /usr/bin/env python3
#
# GUI module generated by PAGE version 4.4.5
# In conjunction with Tcl version 8.6
#    Jan 24, 2015 07:10:24 PM
import sys
import os

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import main2_support


import tkinter as tk
from PIL import Image, ImageTk
from random import randint as rnd
from rooms import rooms
from model import *
#~from crafting import *
from my_functions import *

from support import *


global global_map
global_map = Map(15, 15)

#~ print("CHECKING INTEGRITY")
for i in check_integrity(global_map.m):
    global_map.m[i[0]][i[1]] = 15
global_map.close_borders()
global_map.fix_all()
global_map.modm = deepcopy(global_map.m)
#~ global_map.m = global_map.modm
#~ print("INTEGRITY CHECKED")

global global_player
global_player = Player(global_map)
#~ global global_bitmap
#~ global_bitmap = global_map.m
global global_goods
global_goods = Goods(global_map, N=(global_map.X*global_map.Y)//3)
global global_monsters
global_monsters = Monsters(global_map, global_player, N=(global_map.X*global_map.Y)//4)


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    root.title('New_Toplevel_1')
    root.geometry('600x500+390+106')

    w = New_Toplevel_1 (root, global_map, global_player, global_goods, global_monsters)

    #~ load_images()
    w.draw_map()
    w.draw_decorations()
    w.draw_goods()
    w.draw_monsters()
    w.Canvas1.lift('player')
    w.hide_map()
    w.prev_revealed = reveal(w)
    w.Frame2.after(200, lambda: iface_update(w))

    main2_support.init(root, w)

    root.mainloop()

w = None
def create_New_Toplevel_1(root, param=None):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    w.title('New_Toplevel_1')
    w.geometry('600x500+390+106')
    w_win = New_Toplevel_1 (w)
    main2_support.init(w, w_win, param)
    return w_win

def destroy_New_Toplevel_1():
    global w
    w.destroy()
    w = None


class New_Toplevel_1:
    def __init__(self, master, map_obj, player_obj, items_obj, monsters_obj):
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])
        master.configure(highlightcolor="black")

        self.images = Images()
        self.map_obj = map_obj
        self.player_obj = player_obj
        self.goods_obj = items_obj
        self.monsters_obj = monsters_obj

        self.Frame1 = Frame(master)
        #~ self.Frame1.place(relx=0.75, rely=0.02, relheight=0.97, relwidth=0.24)
        self.Frame1.place(relx=1.0, rely=0.02, relheight=0.97, x=-150)
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(borderwidth="2")
        #~ self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(width=145)

        self.Button1 = Button(self.Frame1)
        self.Button1.place(relx=0.34, rely=0.02, height=36, width=37)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(text='''N''')
        self.Button1.configure(command=lambda: move_player(self, side=Const.N, dxy=(0,-1), newxy=(2,4)))

        self.Button2 = Button(self.Frame1)
        self.Button2.place(relx=0.34, rely=0.1, height=36, width=37)
        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(text='''S''')
        self.Button2.configure(command=lambda: move_player(self, side=Const.S, dxy=(0,1), newxy=(2,0)))

        self.Button3 = Button(self.Frame1)
        self.Button3.place(relx=0.07, rely=0.1, height=36, width=37)
        self.Button3.configure(activebackground="#d9d9d9")
        self.Button3.configure(text='''W''')
        self.Button3.configure(command=lambda: move_player(self, side=Const.W, dxy=(-1,0), newxy=(4,2)))

        self.Button4 = Button(self.Frame1)
        self.Button4.place(relx=0.62, rely=0.1, height=36, width=37)
        self.Button4.configure(activebackground="#d9d9d9")
        self.Button4.configure(text='''E''')
        self.Button4.configure(command=lambda: move_player(self, side=Const.E, dxy=(1,0), newxy=(0,2)))

        self.Button5 = Button(self.Frame1)
        self.Button5.place(relx=0.07, rely=0.19, height=26, width=57)
        self.Button5.configure(activebackground="#d9d9d9")
        self.Button5.configure(text='''Use''')
        self.Button5.configure(command=lambda: use(self))

        self.Button6 = Button(self.Frame1)
        self.Button6.place(relx=0.07, rely=0.25, height=26, width=57)
        self.Button6.configure(activebackground="#d9d9d9")
        self.Button6.configure(text='''Pick up''')
        self.Button6.configure(command = lambda: pick_up(self))

        self.Button7 = Button(self.Frame1)
        self.Button7.place(relx=0.48, rely=0.19, height=26, width=57)
        self.Button7.configure(activebackground="#d9d9d9")
        self.Button7.configure(text='''Door''')
        self.Button7.configure(command = lambda: interact_with_door(self))

        self.Button8 = Button(self.Frame1)
        self.Button8.place(relx=0.48, rely=0.25, height=26, width=57)
        self.Button8.configure(activebackground="#d9d9d9")
        self.Button8.configure(text='''Craft''')
        self.Button8.configure(command = lambda: craft(self))

        self.Scrolledlistbox1 = ScrolledListBox(self.Frame1)
        self.Scrolledlistbox1.place(relx=0.04, rely=0.49, relheight=0.12
                , width=130)
        self.Scrolledlistbox1.configure(background="white")
        self.Scrolledlistbox1.configure(font="TkFixedFont")
        self.Scrolledlistbox1.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox1.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox1.configure(takefocus="0")
        self.Scrolledlistbox1.configure(width=0)
        
        self.Scrolledlistbox1.configure(selectmode=tk.SINGLE)
        
        for i in self.player_obj.inventory:
            self.Scrolledlistbox1.insert(tk.END, i)
        
        
        self.Scrolledlistbox1.configure(exportselection=0)
        self.Scrolledlistbox1.activate(0)
        self.Scrolledlistbox1.selection_set(0)
        self.Scrolledlistbox1.bind("<<ListboxSelect>>", lambda event: select_inventory1(self))
        

        self.Canvas2 = Canvas(self.Frame1)
        self.Canvas2.place(relx=0.03, rely=0.31)
        self.Canvas2.configure(background="white")
        self.Canvas2.configure(borderwidth="2")
        self.Canvas2.configure(relief=RIDGE)
        self.Canvas2.configure(selectbackground="#c4c4c4")
        self.Canvas2.configure(width=60)
        self.Canvas2.configure(height=60)
        
        current = self.images.items_images[self.getcursel1()[1]]
        self.Canvas2.create_image(3, 3, image=current, anchor=tk.NW, tags=('item',))


        self.Canvas3 = Canvas(self.Frame1)
        self.Canvas3.place(relx=0.48, rely=0.31)
        self.Canvas3.configure(background="white")
        self.Canvas3.configure(borderwidth="2")
        self.Canvas3.configure(relief=RIDGE)
        self.Canvas3.configure(selectbackground="#c4c4c4")
        self.Canvas3.configure(takefocus="0")
        self.Canvas3.configure(width=60)
        self.Canvas3.configure(height=60)



        self.Label1 = Label(self.Frame1)
        self.Label1.place(relx=0.14, rely=0.45, height=18, width=37)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.textvar = tk.StringVar()
        self.Label1.configure(textvariable = self.Label1.textvar)

        self.Label2 = Label(self.Frame1)
        self.Label2.place(relx=0.55, rely=0.45, height=18, width=37)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.textvar = tk.StringVar()
        self.Label2.configure(textvariable = self.Label2.textvar)

        self.Scrolledlistbox2 = ScrolledListBox(self.Frame1)
        self.Scrolledlistbox2.place(relx=0.04, rely=0.62, relheight=0.12
                , width=130)
        self.Scrolledlistbox2.configure(background="white")
        self.Scrolledlistbox2.configure(font="TkFixedFont")
        self.Scrolledlistbox2.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox2.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox2.configure(takefocus="0")
        self.Scrolledlistbox2.configure(width=10)

        self.Scrolledlistbox2.configure(selectmode=tk.SINGLE)
        for i in self.player_obj.inventory:
            self.Scrolledlistbox2.insert(tk.END, i)

        self.Scrolledlistbox2.configure(exportselection=0)
        self.Scrolledlistbox2.activate(0)
        self.Scrolledlistbox2.selection_set(0)
        self.Scrolledlistbox2.bind("<<ListboxSelect>>", lambda event: select_inventory2(self))

        current = self.images.items_images[self.getcursel2()[1]]
        self.Canvas3.create_image(3, 3, image=current, anchor=tk.NW, tags=('item',))


        self.Labelframe1 = LabelFrame(self.Frame1)
        self.Labelframe1.place(relx=0.07, rely=0.82, relheight=0.15
                , relwidth=0.79)
        self.Labelframe1.configure(relief=GROOVE)
        self.Labelframe1.configure(text='''Stats''')
        self.Labelframe1.configure(width=115)

        self.Label3 = Label(self.Labelframe1)
        self.Label3.place(relx=0.05, rely=0.13, height=18, width=40)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(justify=tk.LEFT)
        self.Label3.configure(text='''Health''')

        self.Label4 = Label(self.Labelframe1)
        self.Label4.place(relx=0.05, rely=0.4, height=18, width=40)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(justify=tk.LEFT)
        self.Label4.configure(text='''Agility''')

        self.Label5 = Label(self.Labelframe1)
        self.Label5.place(relx=0.05, rely=0.67, height=18, width=60)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(justify=tk.LEFT)
        self.Label5.configure(text='''Strength''')

        self.Label6 = Label(self.Labelframe1)
        self.Label6.place(relx=0.57, rely=0.13, height=18, width=37)
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(text='''Label''')
        self.Label6.textvar = tk.StringVar()
        self.Label6.configure(textvariable=self.Label6.textvar)

        self.Label7 = Label(self.Labelframe1)
        self.Label7.place(relx=0.57, rely=0.4, height=18, width=37)
        self.Label7.configure(activebackground="#f9f9f9")
        self.Label7.configure(text='''Label''')
        self.Label7.textvar = tk.StringVar()
        self.Label7.configure(textvariable=self.Label7.textvar)

        self.Label8 = Label(self.Labelframe1)
        self.Label8.place(relx=0.57, rely=0.67, height=18, width=37)
        self.Label8.configure(activebackground="#f9f9f9")
        self.Label8.configure(text='''Label''')
        self.Label8.textvar = tk.StringVar()
        self.Label8.configure(textvariable=self.Label8.textvar)

        self.Frame2 = Frame(master)
        self.Frame2.place(relx=0.02, rely=0.02, relheight=0.97, relwidth=1, width=-180)
        self.Frame2.configure(relief=GROOVE)
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief=GROOVE)
        #~ self.Frame2.configure(width=435)
        #~ self.Frame2.configure(width=435)

        self.Canvas1 = Canvas(self.Frame2)
        self.Canvas1.place(relx=0.02, rely=0.0, relheight=0.89, relwidth=0.95)
        self.Canvas1.configure(background="gray90")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(relief=RIDGE)
        self.Canvas1.configure(selectbackground="#c4c4c4")
        #~ self.Canvas1.configure(width=414)
        #~ self.Canvas1.configure(width=self.map_obj.X*120+15)

        #~ self.Canvas1.bind("<Button-1>", lambda event: oncanvas(event, self))
        
        self.Canvas1.bind("<Button-3>", lambda event: mv(event, self))
        if sys.platform == "posix":
            self.Canvas1.bind("<Button-4>", lambda event: on_mousewheel_up(event, self))
            self.Canvas1.bind("<Button-5>", lambda event: on_mousewheel_down(event, self))
        else:
            self.Canvas1.bind("<MouseWheel>", lambda event: on_mousewheel_up(event, self))

        self.Canvas1.bind_all(sequence='<KeyPress-W>', func=lambda event: move_player(self, side=Const.N, dxy=(0,-1), newxy=(2,4)))
        self.Canvas1.bind_all(sequence='<KeyPress-S>', func=lambda event: move_player(self, side=Const.S, dxy=(0,1), newxy=(2,0)))
        self.Canvas1.bind_all(sequence='<KeyPress-A>', func=lambda event: move_player(self, side=Const.W, dxy=(-1,0), newxy=(4,2)))
        self.Canvas1.bind_all(sequence='<KeyPress-D>', func=lambda event: move_player(self, side=Const.E, dxy=(1,0), newxy=(0,2)))
        
        self.Canvas1.bind_all(sequence='<KeyPress-w>', func=lambda event: move_player(self, side=Const.N, dxy=(0,-1), newxy=(2,4)))
        self.Canvas1.bind_all(sequence='<KeyPress-s>', func=lambda event: move_player(self, side=Const.S, dxy=(0,1), newxy=(2,0)))
        self.Canvas1.bind_all(sequence='<KeyPress-a>', func=lambda event: move_player(self, side=Const.W, dxy=(-1,0), newxy=(4,2)))
        self.Canvas1.bind_all(sequence='<KeyPress-d>', func=lambda event: move_player(self, side=Const.E, dxy=(1,0), newxy=(0,2)))
        
        self.Canvas1.bind_all(sequence='<KeyPress-E>', func=lambda event: pick_up(self))
        self.Canvas1.bind_all(sequence='<KeyPress-e>', func=lambda event: pick_up(self))

        self.Canvas1.bind_all(sequence='<KeyPress-F>', func=lambda event: Using.use_flashlight(self))
        self.Canvas1.bind_all(sequence='<KeyPress-f>', func=lambda event: Using.use_flashlight(self))
        
        self.Canvas1.bind_all(sequence='<KeyPress-R>', func=lambda event: craft(self))
        self.Canvas1.bind_all(sequence='<KeyPress-r>', func=lambda event: craft(self))


        self.Scrollbar1 = tk.Scrollbar(self.Frame2)
        self.Scrollbar1.pack(anchor=tk.E, expand=1)
        self.Scrollbar1.place(relx=1.0, rely=0.0, relheight=0.95, x=-10)
        self.Scrollbar1.configure(orient="vertical")
        self.Scrollbar1.configure(command=self.Canvas1.yview)

        self.Canvas1.configure(yscrollcommand=self.Scrollbar1.set)

        self.Scrollbar2 = tk.Scrollbar(self.Frame2)
        self.Scrollbar2.pack(anchor=tk.S, expand=1)
        self.Scrollbar2.place(relx=0.0, rely=1.0, relwidth=0.95, y=-10)
        self.Scrollbar2.configure(orient="horizontal")
        self.Scrollbar2.configure(command=self.Canvas1.xview)

        self.Canvas1.configure(xscrollcommand=self.Scrollbar2.set)

        self.Canvas1.configure(scrollregion=(0, 0, 180*self.map_obj.X+15, 180*self.map_obj.Y+30))



        self.Message1 = Message(self.Frame2)
        self.Message1.place(relx=0.02, rely=1.0, relwidth=0.95, y=-70)
        self.Message1.configure(anchor=W)
        self.Message1.configure(relief=RIDGE)
        self.Message1.configure(text='''Message''')
        self.Message1.configure(width=413)
        
        self.Message1.textvar = tk.StringVar()
        self.Message1.config(textvariable=self.Message1.textvar)
        self.Message1.messages = ['test1', 'test1', 'test3', 'test4']
        self.Message1.textvar.set('\n'.join(self.Message1.messages))

        self.menubar = Menu(master,bg=_bgcolor,fg=_fgcolor)
        master.configure(menu = self.menubar)

        self.game = Menu(master,tearoff=0)
        self.menubar.add_cascade(menu=self.game,
                activebackground="#d9d9d9",
                activeforeground="#111111",
                background="#d9d9d9",
                foreground="#000000",
                label="Game")
        self.game.add_command(
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=lambda: newgame(self),
                foreground="#000000",
                label="New")
        self.game.add_command(
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=sys.exit,
                foreground="#000000",
                label="Exit")
        self.help = Menu(master,tearoff=0)
        self.menubar.add_cascade(menu=self.help,
                activebackground="#d9d9d9",
                activeforeground="#111111",
                background="#d9d9d9",
                foreground="#000000",
                label="Help")
        self.help.add_command(
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=main2_support.TODO,
                foreground="#000000",
                label="Help")
        self.help.add_command(
                activebackground="#d9d9d9",
                activeforeground="#000000",
                background="#d9d9d9",
                command=main2_support.TODO,
                foreground="#000000",
                label="About")

    def message(self, message):
        self.Message1.messages.pop(0)
        self.Message1.messages.append(str(message))
        self.Message1.textvar.set('\n'.join(self.Message1.messages))

    def getcursel1(self):
        cursel1 = self.Scrolledlistbox1.curselection()
        if cursel1:
            item1 = self.Scrolledlistbox1.get(cursel1[0])
            return cursel1[0], item1
        else:
            return None, None
        
    def getcursel2(self):
        cursel2 = self.Scrolledlistbox2.curselection()
        if cursel2:
            item2 = self.Scrolledlistbox2.get(cursel2[0])
            return cursel2[0], item2
        else:
            return None, None

    def draw_map(self):
        X = Const.X
        Y = Const.Y

        self.vertical_gates_ids = set()
        self.horizontal_gates_ids = set()

        for i in range(self.map_obj.Y*6):
            self.Canvas1.create_line(0, i*30+Const.Y, self.map_obj.X*Const.X*6, i*30+Const.Y)
            self.Canvas1.create_line(i*Const.X+Const.X//2, 0, i*Const.X+Const.X//2, self.map_obj.Y*Const.Y*6)    

        for i in range(self.map_obj.Y):
            for j in range(self.map_obj.X):
                
                if '╜' in rooms[self.map_obj.m[i][j]]:
                    self.Canvas1.create_image(j*X*6-X//2, i*Y*6+Y//2, image=self.images.wall_vert_door, anchor=tk.NW, tags=('vertical',))
                    self.vertical_gates_ids.add(self.Canvas1.create_image(j*X*6-X//2, i*Y*6+Y*3-Y//2, image=self.images.vert_door, anchor=tk.NW, tags=('gates_vertical','gates')))
                else:
                    self.Canvas1.create_image(j*X*6-X//2, i*Y*6+Y//2, image=self.images.wall_vert_nodoor, anchor=tk.NW, tags=('vertical',))
                
                if '╙' in rooms[self.map_obj.m[i][j]]:
                    self.Canvas1.create_image((j+1)*X*6-X//2, i*Y*6+Y//2, image=self.images.wall_vert_door, anchor=tk.NW, tags=('vertical',))
                else:
                    self.Canvas1.create_image((j+1)*X*6-X//2, i*Y*6+Y//2, image=self.images.wall_vert_nodoor, anchor=tk.NW, tags=('vertical',))

                if '╛' in rooms[self.map_obj.m[i][j]]:
                    self.Canvas1.create_image(j*X*6, i*Y*6, image=self.images.wall_horiz_door, anchor=tk.NW, tags=('horizontal',))
                else:
                    self.Canvas1.create_image(j*X*6, i*Y*6, image=self.images.wall_horiz_nodoor, anchor=tk.NW, tags=('horizontal',))
                
                if '╕' in rooms[self.map_obj.m[i][j]]:
                    self.Canvas1.create_image(j*X*6, (i+1)*Y*6, image=self.images.wall_horiz_door, anchor=tk.NW, tags=('horizontal',))
                    self.horizontal_gates_ids.add(self.Canvas1.create_image(j*X*6+X*3-X//2, (i+1)*Y*6, image=self.images.horiz_door, anchor=tk.NW, tags=('gates_horizontal','gates')))
                else:
                    self.Canvas1.create_image(j*X*6, (i+1)*Y*6, image=self.images.wall_horiz_nodoor, anchor=tk.NW, tags=('horizontal',))


        self.Canvas1.create_image(16, 31, image=self.images.player, anchor=tk.NW, tags=('player',))
        
        self.Canvas1.lift("vertical")
        self.Canvas1.lift("gates")

    def draw_decorations(self):
        X = self.map_obj.X
        Y = self.map_obj.Y

        for i in range(Y//3):
            for j in range(X//3):
                key = choice(list(self.images.map_decorations_images.keys()))
                self.Canvas1.create_image(rnd(0, X-1)*180+15+rnd(0,4)*30, rnd(0, Y-1)*180+30+rnd(0,4)*30, image=self.images.map_decorations_images[key], anchor=(tk.NW,), tags=('decoration',))

    def draw_goods(self):
        X = self.map_obj.X
        Y = self.map_obj.Y
        
        self.goods_ids = set()
        
        for i in range(Y):
            for j in range(X):
                if self.goods_obj.goods_map[i][j]:
                    item = self.goods_obj.goods_map[i][j]
                    img = self.images.map_items_images[item['item']]
                    self.goods_ids.add(self.Canvas1.create_image(j*180+item['coords'][0]*30+15, i*180+item['coords'][1]*30+30, image=img, anchor=tk.NW, tags=('item',)))

        self.Canvas1.lift("item")

    def draw_monsters(self):
        X = self.map_obj.X
        Y = self.map_obj.Y
        
        self.monsters_ids = set()
        
        for i in range(Y):
            for j in range(X):
                if self.monsters_obj.monsters_map[i][j]:
                    monster = self.monsters_obj.monsters_map[i][j]
                    img = self.images.map_monsters_images[monster['monster']]
                    newid = self.Canvas1.create_image(j*180+monster['coords'][0]*30+15, i*180+monster['coords'][1]*30+30, image=img, anchor=tk.NW, tags=('monster',))
                    self.monsters_obj.monsters_map[i][j]['tk_id'] = newid
                    self.monsters_ids.add(newid)
        self.Canvas1.lift("monster")    

    def hide_map(self):
        self.darkness_imgs_ids = set()
        for i in range(self.map_obj.Y):
            for j in range(self.map_obj.X):
                self.darkness_imgs_ids.add(self.Canvas1.create_image(i*180, j*180+15, image=self.images.black180, anchor=tk.NW, tags=('darkness',)))



# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=self._autoscroll(vsb),
        #    xscrollcommand=self._autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()



